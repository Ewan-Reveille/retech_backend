basePath: /api/v1
definitions:
  controllers.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      isSeller:
        type: boolean
      username:
        type: string
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Category:
    properties:
      id:
        description: ID   uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
        type: string
      name:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
    type: object
  models.Message:
    properties:
      content:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        description: // ID         uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
        type: string
      readAt:
        type: string
      receiver:
        $ref: '#/definitions/models.User'
      receiverID:
        type: string
      sender:
        $ref: '#/definitions/models.User'
      senderID:
        type: string
      updatedAt:
        type: string
    type: object
  models.Order:
    properties:
      buyer:
        $ref: '#/definitions/models.User'
      buyer_id:
        type: string
      commission:
        type: number
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        description: ID         uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
        type: string
      payment:
        $ref: '#/definitions/models.Payment'
      payment_id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      shipping:
        $ref: '#/definitions/models.Shipping'
      shipping_id:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  models.Payment:
    properties:
      amount:
        type: number
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      method:
        $ref: '#/definitions/models.PaymentMethod'
      orderID:
        type: string
      paymentID:
        description: PaymentID uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
        type: string
      status:
        $ref: '#/definitions/models.PaymentStatus'
      updatedAt:
        type: string
      userID:
        type: string
    type: object
  models.PaymentMethod:
    enum:
    - paypal
    - card
    - crypto
    type: string
    x-enum-varnames:
    - MethodPaypal
    - MethodCard
    - MethodCrypto
  models.PaymentStatus:
    enum:
    - pending
    - checked
    - failed
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusChecked
    - StatusFailed
  models.Product:
    properties:
      category:
        type: string
      condition:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        description: ID          uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
        type: string
      images:
        items:
          $ref: '#/definitions/models.ProductImage'
        type: array
      price:
        type: number
      seller_id:
        type: string
      status:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
  models.ProductImage:
    properties:
      alt:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      imageURL:
        type: string
      productID:
        type: string
      updatedAt:
        type: string
    type: object
  models.Shipping:
    properties:
      carrier:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        description: ID             uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
        type: string
      status:
        description: prepared, shipped, transit, delivered
        type: string
      trackingNumber:
        type: string
      updatedAt:
        type: string
    type: object
  models.SwaggerCategory:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  models.User:
    properties:
      address:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        description: |-
          ID          uuid.UUID `gorm:"type:char(36);primaryKey"` // Tests uniquement
          ID          uuid.UUID `gorm:"type:uuid;default:uuid_generate_v4();primaryKey"`
        type: string
      isAdmin:
        type: boolean
      isSeller:
        type: boolean
      isVerified:
        type: boolean
      password:
        type: string
      phoneNumber:
        type: string
      products:
        items:
          $ref: '#/definitions/models.Product'
        type: array
      rating:
        type: number
      updatedAt:
        type: string
      username:
        type: string
    type: object
  services.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  services.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
host: localhost:8080
info:
  contact:
    email: ewan@aia-handicap.com
    name: Ewan Réveillé--Adam
    url: https://aia-handicap.com
  description: This is the backend API for Retech
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Retech API
  version: "1.0"
paths:
  /categories:
    get:
      description: Get a list of all product categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get all categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new product category
      parameters:
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerCategory'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerCategory'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new category
      tags:
      - Categories
  /categories/{id}:
    delete:
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a category
      tags:
      - Categories
    get:
      description: Get detailed information about a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a category by ID
      tags:
      - Categories
    put:
      consumes:
      - application/json
      description: Update an existing category's information
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a category
      tags:
      - Categories
  /categories/{id}/products:
    get:
      description: Get all products belonging to a specific category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get products by category
      tags:
      - Categories
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return user details
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/services.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - Users
  /messages:
    post:
      consumes:
      - application/json
      description: Create a new message between users
      parameters:
      - description: Message object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.Message'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new message
      tags:
      - Messages
  /messages/{id}:
    delete:
      description: Delete a message by ID
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a message
      tags:
      - Messages
    get:
      description: Retrieve a specific message by its ID
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get a message by ID
      tags:
      - Messages
    put:
      consumes:
      - application/json
      description: Update an existing message's content
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated message object
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/models.Message'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Message'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a message
      tags:
      - Messages
  /orders:
    post:
      consumes:
      - application/json
      description: Create a new order with Stripe payment integration
      parameters:
      - description: Order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "201":
          description: Returns created order and Stripe client secret
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new order
      tags:
      - Orders
  /orders/{id}:
    delete:
      description: Delete an order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete order
      tags:
      - Orders
    get:
      description: Retrieve order details by order ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get order by ID
      tags:
      - Orders
    put:
      consumes:
      - application/json
      description: Update existing order details
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated order details
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update order
      tags:
      - Orders
  /products:
    get:
      description: Get a list of all available products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all products
      tags:
      - Products
    post:
      consumes:
      - multipart/form-data
      description: Create a new product with images and Stripe integration
      parameters:
      - description: Seller's username
        in: header
        name: X-User-Username
        required: true
        type: string
      - description: Product title
        in: formData
        name: title
        required: true
        type: string
      - description: Product description
        in: formData
        name: description
        required: true
        type: string
      - description: Product price
        in: formData
        name: price
        required: true
        type: number
      - description: Category ID
        in: formData
        name: category
        required: true
        type: string
      - description: Product condition
        enum:
        - new
        - very good
        - good
        - used
        - fair
        - unknown
        in: formData
        name: condition
        type: string
      - description: Product images
        in: formData
        name: images
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Delete a product listing (seller authorization required)
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a product
      tags:
      - Products
    get:
      description: Get detailed information about a specific product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get product details
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product's information
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product details
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a product
      tags:
      - Products
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/services.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Users
  /user:
    get:
      description: Get a list of all registered users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.UserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: List all users
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
